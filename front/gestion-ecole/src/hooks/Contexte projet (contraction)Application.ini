Contexte projet (contraction)Application web de gestion académique – Frontend React 18+ (Vite) + Tailwind CSS + TypeScript, consommant une API REST Spring Boot. (src/
├── components/          ← composants réutilisables
│   ├── common/          (Button, Input, Select, Modal, Card, Table, 
│   │                     Pagination, SearchInput, LoadingSpinner, Toast)
│   ├── layout/          (Layout, Sidebar, Header, Breadcrumb)
│   ├── dashboard/       (DashboardStats, RecentActivities, QuickActions, AlertsPanel)
│   ├── students/        (StudentForm, StudentList, StudentFilter, StudentCard, StudentDetail)
│   ├── teachers/        (TeacherForm, TeacherList, TeacherCard, TeacherDetail)
│   ├── classes/         (ClassForm, ClassList, ClassCard, ClassStatistics)
│   ├── grades/          (GradeForm, GradeList, GradeTable, BulletinGenerator)
│   ├── payments/        (PaymentForm, PaymentList, PaymentSummary)
│   ├── discipline/      (DisciplineForm, DisciplineList, DisciplineCard)
│   ├── subjects/        (SubjectForm, SubjectList, SubjectCard)
│   ├── equipment/       (EquipmentForm, EquipmentList, EquipmentCard)
│   ├── purchases/       (PurchaseForm, PurchaseList, PurchaseSummary)
│   └── staff/           (StaffForm, StaffList, StaffCard)
│
├── pages/               ← routes/pages
│   ├── Login.jsx
│   ├── Dashboard.jsx
│   ├── students/        (StudentsPage, AddStudentPage, StudentDetailPage)
│   ├── teachers/        (TeachersPage, AddTeacherPage, TeacherDetailPage)
│   ├── classes/         (ClassesPage, AddClassPage, ClassDetailPage)
│   ├── grades/          (GradesPage, GradesByClassPage, BulletinsPage)
│   ├── payments/        (PaymentsPage, AddPaymentPage)
│   ├── discipline/      (DisciplinePage, AddDisciplinePage)
│   ├── subjects/        (SubjectsPage, AddSubjectPage)
│   ├── equipment/       (EquipmentPage, AddEquipmentPage)
│   ├── purchases/       (PurchasesPage, AddPurchasePage)
│   ├── staff/           (StaffPage, AddStaffPage)
│   └── users/           (UsersPage, AddUserPage)
│
├── services/            ← appels API centralisés
│   api.js, auth.js,
│   {student, teacher, class, grade, payment, discipline,
│    subject, equipment, purchase, staff, user, document}Service.js
│
├── hooks/               ← hooks personnalisés
│   useAuth.js, useApi.js, usePagination.js, useToast.js
│
├── utils/               ← fonctions/utilitaires
│   constants.js, helpers.js, validation.js, pdfGenerator.js
│
├── context/             ← context global
│   AuthContext.jsx, ToastContext.jsx
│
├── App.jsx, main.jsx, index.css
), Toutes les fonctionnalites sont importantes (3. Pages & fonctionnalités clés
* Dashboard : stats (élèves, paiements, alertes), actions rapides, activité récente
* Gestion élèves : inscription, liste filtrable (classe/année/section), fiche détail (infos, paiements, notes, discipline)
* Paiements : enregistrement, historique, résumé
* Discipline : gestion des blâmes/convocations
* Matières & Notes : CRUD matières, saisie et consultation notes, génération bulletins PDF
* Gestion enseignants & personnel : CRUD, association classes, tâches, staff administratif
* Achats & matériel : suivi inventaire et achats
* Utilisateurs & rôles : login, affichage conditionnel selon rôle (enseignant, direction…)
4. Contraintes & bonnes pratiques
* Tailwind CSS pour tous les styles
* Composants “common” pour inputs, boutons, modales, etc.
* React Router pour la navigation déclarative
* Centraliser les appels HTTP dans services/
* Formulaires gérés avec React Hook Form
* PDF via jsPDF dans utils/pdfGenerator.js ou components/grades/BulletinGenerator.jsx
* Context API pour authentification et notifications (toasts)
* Structure modulaire pour pouvoir reprendre là où on s’arrête sans perte d’information), (main/
└── java/
    └── com.school.management/
        ├── SchoolManagementApplication.java
        ├── config/
        │   ├── DatabaseConfig.java
        │   └── CorsConfig.java
        ├── entity/
        │   ├── Student.java, Teacher.java, Staff.java, … 
        │   └── enums/ (Section.java, UserRole.java, …)
        ├── dto/
        │   ├── request/  (StudentCreateRequest.java, PaymentCreateRequest.java, …)
        │   └── response/ (StudentResponse.java, GradeResponse.java, …)
        ├── mapper/       (StudentMapper.java, DisciplineMapper.java, …)
        ├── repository/   (StudentRepository.java, PurchaseRepository.java, …)
        ├── service/      (StudentService.java, EquipmentService.java, …)
        ├── controller/   (StudentController.java, DocumentController.java, …)
        └── exception/    (GlobalExceptionHandler.java, ResourceNotFoundException.java, ValidationException.java)), (DisciplineController (/api/disciplines)
   * STAT : GET /{id}/stats → {totalCount, unresolvedCount}
   * CRUD incidents : PUT/DELETE /{id}, POST /{id}/resolve (action), GET /pending-actions, /resolved/{resolved}, /recent (days), /date-range-paginated (startDate,endDate,page,size,sort)
DocumentController (/api/documents)
   * Upload : POST /upload (fichier + métadonnées complètes) & /upload-simple (métadonnées minimales) → 201
   * GET : /, /{id}, /{id}/download
   * Filtres : /student/{studentId}, /type/{documentType}, /academic-year/{year}, /student/{studentId}/type/{documentType}, /created-by/{createdBy}
   * DELETE /{id} → 204
EquipmentController (/api/equipment)
   * CRUD : POST /, GET /, /{id}, PUT/DELETE /{id}
   * Recherche : /serial/{serialNumber}, /category/{category}, /location/{location}, /status/{status}, /assigned-to/{assignedTo}
   * Maintenance : /maintenance-due, /under-warranty
GradeController (/api/grades)
   * CRUD notes : POST /, GET /{id}, PUT/DELETE /{id}
   * Listes : /student/{studentId}, /subject/{subjectId}, /student/{studentId}/subject/{subjectId}
   * Moyennes : /student/{studentId}/average, /subject/{subjectId}/average (semestre)
PaymentController (/api/payments)
   * POST /, GET /, GET /student/{studentId}, /student/{studentId}/total (academicYear)
PurchaseController (/api/purchases)
   * CRUD achats : POST /, GET /, /{id}, PUT/DELETE /{id}
   * Recherche/date : /invoice/{invoiceNumber}, /date-range, /date-range/paginated
   * Relations : /supplier/{supplier} (+date-range), /category/{category} (+date-range)
   * Totaux : /total (dates), /total/supplier/{supplier}, /total/category/{category}
   * Résumés : /summary/category, /summary/supplier (dates)
StaffController (/api/staff)
   * CRUD staff : POST /, GET /, /paginated, /{id}, PUT/DELETE /{id}
   * Filtres : /department/{department}, /position/{role}, /role/{role}, /email/{email}, /search
StudentController (/api/students)
   * CRUD étudiants : POST /, GET /, /paginated, /{id}, PUT/DELETE /{id}
   * Filtres : /class/{classId}, /section/{section}, /language/{language}, /search
   * Non implémentés : /{id}/payments, /{id}/grades, /{id}/disciplines
SubjectController (/api/subjects)
   * CRUD matières : POST /, GET /, /{id}, PUT/DELETE /{id}
   * Filtres : /teacher/{teacherId}, /section/{section}, /search
   * Gestion enseignant : POST /{subjectId}/teacher/{teacherId}, DELETE /{subjectId}/teacher
TeacherController (/api/teachers)
   * CRUD enseignants : POST /, GET /, /{id}, PUT/DELETE /{id}
   * Filtres : /email/{email}, /specialization/{specialization}, /search
   * Non implémentés : /{id}/classes, /{id}/subjects
UserController (/api/users)
   * CRUD users : POST /, GET / (pag.), GET /{id}, PUT /{id}, DELETE /{id}
   * Auth : POST /login
   * Sécurité : PUT /{id}/password, POST /{id}/activate, POST /{id}/deactivate
   * Filtrage rôle : GET /role/{role}). Génère d’abord les fichiers indépendants ; ceux qui n’ont aucune dépendance. Ainsi, si tu t’arrêtes en cours, tu pourras reprendre plus facilement à partir des fichiers restants. Tu fais bien tout. les .env tu y penses aussi.